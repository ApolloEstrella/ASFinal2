PM> Scaffold-DbContext "Server=DESKTOP-GT4AAMB;Database=accounting_system;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Entities -Force


Microsoft.AspNet.WebApi.Core


  values,
                    touched,
                    errors,
                    dirty,
                    isSubmitting,
                    handleChange,
                    handleBlur,
                    handleSubmit,
                    handleReset,


<Autocomplete
                        value={value}
                        onChange={(event, newValue) => {
                          if (typeof newValue === "string") {
                            // timeout to avoid instant validation of the dialog's form.
                            setTimeout(() => {
                              toggleOpen(true);
                              setDialogValue({
                                name: newValue,
                              });
                            });
                          } else if (newValue && newValue.inputValue) {
                            toggleOpen(true);
                            setDialogValue({
                              name: newValue.inputValue,
                            });
                          } else {
                            setValue(newValue);
                          }
                        }}
                        filterOptions={(options, params) => {
                          const filtered = filter(options, params);

                          if (params.inputValue !== "") {
                            filtered.push({
                              inputValue: params.inputValue,
                              name: `Add "${params.inputValue}"`,
                            });
                          }

                          return filtered;
                        }}
                        id="free-solo-dialog-demo"
                        options={subsidiaryLedgerAccounts}
                        getOptionLabel={(option) => {
                          // e.g value selected with enter, right from the input
                          if (typeof option === "string") {
                            return option;
                          }
                          if (option.inputValue) {
                            return option.inputValue;
                          }
                          return option.name;
                        }}
                        selectOnFocus
                        clearOnBlur
                        handleHomeEndKeys
                        renderOption={(option) => option.name}
                        style={{ width: "100%" }}
                        freeSolo
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Search Customer"
                            variant="outlined"
                          />
                        )}
                      />